package com.imooc.o2o.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.hly.o2o.dao.ProductCategoryDao;
import com.hly.o2o.dao.ProductDao;
import com.hly.o2o.dao.ProductImgDao;
import com.hly.o2o.dto.ImageHolder;
import com.hly.o2o.dto.ProductExecution;
import com.hly.o2o.entity.Product;
import com.hly.o2o.entity.ProductImg;
import com.hly.o2o.enums.ProductStateEnum;
import com.hly.o2o.exceptions.ProductOperationException;
import com.hly.o2o.service.ProductService;
import com.hly.o2o.util.ImageUtil;
import com.hly.o2o.util.PageCalculator;
import com.hly.o2o.util.PathUtil;

@Service
public class ProductServiceImpl implements ProductService {
	@Autowired
	private ProductDao productDao;
	@Autowired
	private ProductImgDao productImgDao;
	@Autowired
	private ProductCategoryDao productCategoryDao;

	@Override
	@Transactional
	// 1.处理缩略图，获取缩略图相对路径并赋值给Product
	// 2.往tb_product中写入商品信息，获取productId
	// 3.结合productId批量处理商品详情图
	// 4.将商品详情图列表批量插入到tb_product中
	public ProductExecution addProduct(Product product, ImageHolder thumbnail, List<ImageHolder> productImgList)
			throws ProductOperationException {
		// 空值判断
		if (product != null && product.getShop() != null && product.getShop().getShopId() != null) {
			// 给商品赋上默认的属性
			product.setCreateTime(new Date());
			product.setLastEditTime(new Date());
			// 默认为上架的状态
			product.setEnableStatus(1);
			// 若商品的缩略图不为空则添加
			if (thumbnail != null) {
				addThumbnail(product, thumbnail);
			}
			try {
				// 添加商品信息
				int effectNum = productDao.insertProduct(product);
				if (effectNum <= 0) {
					throw new ProductOperationException("商品添加失败");
				}
			} catch (Exception e) {
				throw new ProductOperationException("商品添加失败" + e.toString());
			}

			// 若商品详情图不为空则添加
			if (productImgList != null && productImgList.size() > 0) {

				addProductImgList(product, productImgList);
			}
			return new ProductExecution(ProductStateEnum.SUCCESS, product);

		} else {
			return new ProductExecution(ProductStateEnum.EMPTY);

		}

	}

	/**
	 * 批量添加商品详情图片
	 * 
	 * @param product
	 * @param productImgList
	 */
	private void addProductImgList(Product product, List<ImageHolder> productHolderImgList) {
		// 获取图片的存储路径，这里就直接放在相对应的店铺文件夹下面
		String dest = PathUtil.getShopImagePath(product.getShop().getShopId());
		List<ProductImg> productImglist = new ArrayList<ProductImg>();
		// 遍历图片集合，并将它们一次添加到商品里面去取
		for (ImageHolder imageHolder : productHolderImgList) {
			String imgAddr = ImageUtil.generateNormalThumbnail(imageHolder, dest);
			ProductImg productImg = new ProductImg();
			productImg.setImgAddr(imgAddr);
			productImg.setProductId(product.getProductId());
			productImg.setCreateTime(new Date());
			productImglist.add(productImg);

		}

		// 如果确实是有图片要添加的话，就执行批量添加操作
		if (productImglist.size() > 0) {
			try {
				int effectNum = productImgDao.batchInsertProductImg(productImglist);
				if (effectNum <= 0) {
					throw new ProductOperationException("添加详情图片失败");

				}
			} catch (Exception e) {
				throw new ProductOperationException("添加商品详情图片失败" + e.getMessage());
			}
		}

	}

	/**
	 * 添加缩略图
	 * 
	 * @param product
	 * @param thumbnail
	 */
	private void addThumbnail(Product product, ImageHolder thumbnail) {
		String dest = PathUtil.getShopImagePath(product.getShop().getShopId());
		String thumbnailAddr = ImageUtil.generateThumbnail(thumbnail, dest);
		product.setImgAddr(thumbnailAddr);

	}

	/**
	 * 通过唯一商品ID查询该商品信息
	 */
	@Override
	public Product getProductById(long productId) {
		Product product = productDao.queryProductById(productId);
		return product;
	}

	/**
	 * 修改商品信息已经商品详情图
	 */
	@Override
	@Transactional
	// 1.若缩略图参数有值，则先处理缩略图
	// 若原先存在缩略图则删除之前的缩略图在添加新图，之后获取缩略图的相对路径赋值给product
	// 2.若商品详情图参数有值，和上面同样的操作
	// 3.将tb_product_img下面的该商品的详情图的记录全部删除，
	// 4.更新product信息
	public ProductExecution modifyProduct(Product product, ImageHolder thumbnail,
			List<ImageHolder> productImageHolderList) {
		// 空值判断
		if (product != null && product.getShop() != null && product.getShop().getShopId() != null) {
			// 给商品设置默认属性
			product.setLastEditTime(new Date());
			// 若商品缩略图不为空则删除原来商品缩略图并添加新的缩略图
			if (thumbnail != null) {
				// 先获取一遍原来的信息，因为原来的信息里有图片的相对地址
				Product beforeProduct = productDao.queryProductById(product.getProductId());
				if (beforeProduct != null) {
					ImageUtil.deleteFileOrPath(beforeProduct.getImgAddr());
				}
				addThumbnail(product, thumbnail);

			}
			// 如果原先的详情图存在则同样先删除在添加新的详情图
			if (productImageHolderList != null && productImageHolderList.size() > 0) {
				deleteProductImageList(product.getProductId());
				addProductImgList(product, productImageHolderList);

			}
			// 更新商品信息
			try {
				int effectNum = productDao.updateProduct(product);
				// 更新失败
				if (effectNum <= 0) {
					throw new ProductOperationException("更新商品失败");
				}
				// 更新成功
				return new ProductExecution(ProductStateEnum.SUCCESS, product);

			} catch (Exception e) {
				throw new ProductOperationException("更新商品信息失败" + e.toString());

			}

		} else {
			// 商品为空
			return new ProductExecution(ProductStateEnum.EMPTY);

		}

	}

	/**
	 * 删除某个商品下的详情图
	 * 
	 * @param productId
	 */
	private void deleteProductImageList(Long productId) {
		// 先根据proudctId获取原来的图片
		List<ProductImg> productImgList = productImgDao.queryProductImgList(productId);
		// 删除原来的图片
		for (ProductImg productImg : productImgList) {
			ImageUtil.deleteFileOrPath(productImg.getImgAddr());
		}
		// 删除数据库里原有的图片信息
		productImgDao.deleteProductImgByProductId(productId);
	}

	/**
	 * 查询商品列表
	 * 
	 */
	@Override
	public ProductExecution getProductList(Product productCondition, int pageIndex, int pageSize) {
		// 页码转换为数据库中的行码，并调用Dao层返回指定数据库行码的数据(商品列表)
		int rowIndex = PageCalculator.calculatorRowIndex(pageIndex, pageSize);
		List<Product> productList = productDao.queryProductList(productCondition, rowIndex, pageSize);
		// 基于相同的查询条件下查询该商品的总数
		int count = productDao.queryProductCount(productCondition);
		ProductExecution pe = new ProductExecution();
		pe.setCount(count);
		pe.setProductList(productList);
		return pe;

	}

	/**
	 * 通过productId和shopId删除指定的商品
	 */
	@Override
	public ProductExecution deleteProduct(Long productId, Long shopId) throws ProductOperationException {
       //删除商品之前先把商品productCategoryId置为空
		 try{
			int effectNum = productDao.deleteProduct(productId, shopId);
			if(effectNum<0){
				throw new ProductOperationException("删除商品失败");
			}else{
				return new ProductExecution(ProductStateEnum.SUCCESS);
			}
		 }catch(Exception e){
				throw new ProductOperationException("删除商品失败"+e.getMessage());
			 
		 }
		
	}

}
