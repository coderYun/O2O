package com.imooc.o2o.dao;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.FixMethodOrder;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runners.MethodSorters;
import org.springframework.beans.factory.annotation.Autowired;

import com.hly.o2o.BaseTest;
import com.hly.o2o.dao.ProductDao;
import com.hly.o2o.dao.ProductImgDao;
import com.hly.o2o.entity.Product;
import com.hly.o2o.entity.ProductCategory;
import com.hly.o2o.entity.ProductImg;
import com.hly.o2o.entity.Shop;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ProductDaoTest extends BaseTest {
	@Autowired
	private ProductDao productDao;
	@Autowired
	private ProductImgDao productImgDao;
	@Ignore
    @Test
    
	public void testAInsertProduct() throws Exception {
    	//测试一个shopID为1的店铺，并且商品类别为1，给他添加三个产品
		Shop shop1 = new Shop();
		shop1.setShopId(1L);
		ProductCategory pc1 = new ProductCategory();
		pc1.setProductCategoryId(1L);
		Product product1 = new Product();
		product1.setProductName("测试1");
		product1.setProductDesc("测试Desc1");
		product1.setImgAddr("test1");
		product1.setPriority(0);
		product1.setEnableStatus(1);
		product1.setCreateTime(new Date());
		product1.setLastEditTime(new Date());
		product1.setShop(shop1);
		product1.setProductCategory(pc1);
		Product product2 = new Product();
		product2.setProductName("测试2");
		product2.setProductDesc("测试Desc2");
		product2.setImgAddr("test2");
		product2.setPriority(2);
		product2.setEnableStatus(0);
		product2.setCreateTime(new Date());
		product2.setLastEditTime(new Date());
		product2.setShop(shop1);
		product2.setProductCategory(pc1);
		Product product3 = new Product();
		product3.setProductName("Test3");
		product3.setProductDesc("测试Desc3");
		product3.setImgAddr("test3");
		product3.setPriority(4);
		product3.setEnableStatus(1);
		product3.setCreateTime(new Date());
		product3.setLastEditTime(new Date());
		product3.setShop(shop1);
		product3.setProductCategory(pc1);
		int effectedNum = productDao.insertProduct(product1);
		assertEquals(1, effectedNum);
		effectedNum = productDao.insertProduct(product2);
		assertEquals(1, effectedNum);
		effectedNum = productDao.insertProduct(product3);
		assertEquals(1, effectedNum);
	}
    
    @Test
	public void testBQueryProductList() throws Exception {
		Product product = new Product();
		Shop shop=new Shop();
		shop.setShopId(2L);
		product.setShop(shop);
		product.setEnableStatus(1);
		List<Product> productList = productDao.queryProductList(product, 0, 3);
		assertEquals(3, productList.size());
		int count = productDao.queryProductCount(product);
		assertEquals(5, count);
		product.setProductName("测试");
		productList = productDao.queryProductList(product, 0, 3);
		assertEquals(2, productList.size());
		count = productDao.queryProductCount(product);
		assertEquals(2, count);
		
	}
    
    @Test
    @Ignore
	public void testCQueryProductByProductId() throws Exception {
		long productId = 45;
		ProductImg productImg1 = new ProductImg();
		productImg1.setImgAddr("图片1");
		productImg1.setImgDesc("测试图片1");
		productImg1.setPriority(1);
		productImg1.setCreateTime(new Date());
		productImg1.setProductId(productId);
		ProductImg productImg2 = new ProductImg();
		productImg2.setImgAddr("图片2");
		productImg2.setPriority(1);
		productImg2.setCreateTime(new Date());
		productImg2.setProductId(productId);
		List<ProductImg> productImgList = new ArrayList<ProductImg>();
		productImgList.add(productImg1);
		productImgList.add(productImg2);
		int effectedNum = productImgDao.batchInsertProductImg(productImgList);
		assertEquals(2, effectedNum);
		Product product = productDao.queryProductById(productId);
		assertEquals(2, product.getProductImgList().size());
		effectedNum = productImgDao.deleteProductImgByProductId(productId);
		assertEquals(2, effectedNum);
	}
    
    @Test
    @Ignore
	public void testDUpdateProduct() throws Exception {
		Product product = new Product();
		Shop shop=new Shop();
		ProductCategory pc=new ProductCategory();
		shop.setShopId(1L);
		pc.setProductCategoryId(1L);
		product.setProductId(45L);
		product.setShop(shop);
		product.setProductCategory(pc);
		product.setProductName("第一个产品");
		int effectedNum = productDao.updateProduct(product);
		assertEquals(1, effectedNum);
	}
    @Test
    @Ignore
    public void testEUpdateProductCategoryIdToNull(){
    	//将商品ID为2的商品ID为空
    	int effectnum=productDao.updateProductCategoryToNull(2);
    	assertEquals(1,effectnum);
    }
    
    @Test
    @Ignore
    public void testFDeleteProduct()throws Exception{
    	//清除Insert方法插入的商品
    	Product productCondition = new Product();
		ProductCategory pc=new ProductCategory();
		pc.setProductCategoryId(1L);
		productCondition.setProductCategory(pc);
		//通过productCategoryId查询出新增的记录
		List<Product> productList = productDao.queryProductList(productCondition, 0, 8);
		assertEquals(4,productList.size());
		
		//循环去删除
		for(Product p:productList){
			int effectnum=productDao.deleteProduct(p.getProductId(), 1);
			assertEquals(effectnum,1);
		}
		
		
		
	
    }

}
