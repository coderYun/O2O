package com.imooc.o2o.web.local;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hly.o2o.dto.LocalAuthExecution;
import com.hly.o2o.entity.LocalAuth;
import com.hly.o2o.entity.PersonInfo;
import com.hly.o2o.enums.LocalAuthStateEnum;
import com.hly.o2o.exceptions.LocalAuthOperationException;
import com.hly.o2o.service.LocalAuthService;
import com.hly.o2o.util.CodeUtil;
import com.hly.o2o.util.HttpServletRequestUtil;

@Controller
@RequestMapping(value = "local", method = { RequestMethod.GET, RequestMethod.POST })
public class LocalAuthController {
	@Autowired
	private LocalAuthService localAuthService;

	/**
	 * 将用户信息与平台绑定
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/bindlocalauth", method = RequestMethod.POST)
	@ResponseBody
	private Map<String, Object> bindLocalAuth(HttpServletRequest request) {
		Map<String, Object> modelMap = new HashMap<String, Object>();
		// 验证码校验
		if (!CodeUtil.checkVerifyCode(request)) {
			modelMap.put("success", false);
			modelMap.put("errMsg", "输入错误的验证码");
			return modelMap;

		}
		// 获取前台输入的账号，
		String userName = HttpServletRequestUtil.getString(request, "userName");
		// 获取前台输入的密码
		String password = HttpServletRequestUtil.getString(request, "password");
		// 从session中获取当前用户的信息，用户一旦通过微信登录后，便能从session中获取用户的信息
		PersonInfo user = (PersonInfo) request.getSession().getAttribute("user");
		// 非空判断，要求当前用户的用户密码以及当前用户的session要非空
		if (userName != null && password != null && user != null && user.getUserId() != null) {

			// 创建LocalAuth并绑定
			LocalAuth localAuth = new LocalAuth();
			localAuth.setCreateTime(new Date());
			localAuth.setUsername(userName);
			localAuth.setPassword(password);
			localAuth.setPersonInfo(user);

			LocalAuthExecution la = localAuthService.bindLocalAuhth(localAuth);
			if (la.getState() == LocalAuthStateEnum.SUUCESS.getState()) {
				modelMap.put("success", true);

			} else {
				modelMap.put("success", false);
				modelMap.put("errMsg", la.getStateInfo());
			}

		} else {
			modelMap.put("success", false);
			modelMap.put("errMsg", "用户名和密码不能为空");

		}

		return modelMap;

	}

	/**
	 * 修改密码操作
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/changelocalpwd", method = RequestMethod.POST)
	@ResponseBody
	private Map<String, Object> changeLocalPwd(HttpServletRequest request) {
		Map<String, Object> modelMap = new HashMap<String, Object>();
		// 验证码的校验
		if (!CodeUtil.checkVerifyCode(request)) {
			modelMap.put("success", false);
			modelMap.put("errMsg", "输入错误的验证码");
			return modelMap;

		}
		// 获取前台传过来的用户名
		String userName = HttpServletRequestUtil.getString(request, "userName");
		// 获取前台输入的密码
		String password = HttpServletRequestUtil.getString(request, "password");
		// 获取前台传过来的新密码
		String newPassword = HttpServletRequestUtil.getString(request, "newPassword");
		// 从session中获取当前用户的信息，用户一旦通过微信登录，便能通过session
		PersonInfo personInfo = (PersonInfo) request.getSession().getAttribute("user");

		// 非空判断，以及判断新旧密码是否一致(新旧密码不能相同)
		if (userName != null && password != null && newPassword != null && personInfo != null
				&& personInfo.getUserId() != null && !password.equals(newPassword)) {
			try {
				// 先要查看是否是本人登录，即账号密码是否一致，否则就为非法操作
				LocalAuth localAuth = localAuthService.getLocalAuthByUserId(personInfo.getUserId());
				if (localAuth == null || !localAuth.getUsername().equals(userName)) {
					// 不一致则退出
					modelMap.put("success", false);
					modelMap.put("errMsg", "输入的账号非本次登录的账号");
					return modelMap;

				}

				// 通过登录验证之后然后在进行修改密码操作
				LocalAuthExecution lae = localAuthService.modifyLocalAuth(personInfo.getUserId(), userName, password,
						newPassword);
				if (lae.getState() == LocalAuthStateEnum.SUUCESS.getState()) {
					modelMap.put("success", true);
				} else {
					modelMap.put("success", false);
					modelMap.put("errMsg", lae.getStateInfo());
				}
			} catch (LocalAuthOperationException e) {
				modelMap.put("success", false);
				modelMap.put("errMsg", e.getMessage());
				return modelMap;

			}

		} else {
			modelMap.put("success", false);
			modelMap.put("errMsg", "用户信息填写错误");
		}

		return modelMap;
	}

	/**
	 * 用户登录验证
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/logincheck", method = RequestMethod.POST)
	@ResponseBody
	private Map<String, Object> logincheck(HttpServletRequest request) {
		Map<String, Object> modelMap = new HashMap<String, Object>();
		// 获取是否需要进行验证码校验的标识(因为一旦用户输入错误三次用户名密码，就要进行验证码的输入校验啦)
		boolean needVerify = HttpServletRequestUtil.getBoolean(request, "needVerify");
		if (needVerify && !CodeUtil.checkVerifyCode(request)) {
			modelMap.put("success", false);
			modelMap.put("errMsg", "输入错误的验证码");
			return modelMap;

		}
		// 获取前台传过来的用户名账号
		String userName = HttpServletRequestUtil.getString(request, "userName");
		// 获取从前台传过来的密码
		String password = HttpServletRequestUtil.getString(request, "password");
		// 非空判断
		if (userName != null && password != null) {
			LocalAuth localAuth = localAuthService.getLocalAuthByUserNameAndPwd(userName, password);
			if (localAuth != null) {
				// 如果登录成功，在session里设置用户的信息
				modelMap.put("success", true);
				request.getSession().setAttribute("user", localAuth.getPersonInfo());
			} else {
				// 登录失败
				modelMap.put("success", false);
				modelMap.put("errMsg", "用户名或密码错误");

			}
		} else {
			modelMap.put("success", false);
			modelMap.put("errMsg", "用户名或密码均不能为空");

		}
		return modelMap;
	}

	/**
	 * 当用户点击注销按钮的时候注销session
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/logout", method = RequestMethod.POST)
	@ResponseBody
	private Map<String, Object> logOut(HttpServletRequest request) {
		Map<String, Object> modelMap = new HashMap<String, Object>();
		// 将用户session置为空
		request.getSession().setAttribute("user", null);
		modelMap.put("success", true);
		return modelMap;

	}

}
