package com.imooc.o2o.web.frontend;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hly.o2o.dto.ShopExecution;
import com.hly.o2o.entity.Area;
import com.hly.o2o.entity.Shop;
import com.hly.o2o.entity.ShopCategory;
import com.hly.o2o.service.AreaService;
import com.hly.o2o.service.ShopCategoryService;
import com.hly.o2o.service.ShopService;
import com.hly.o2o.util.HttpServletRequestUtil;

@Controller
@RequestMapping("/frontend")
public class ShopListController {
	@Autowired
	private AreaService areaService;
	@Autowired
	private ShopCategoryService shopCategoryService;
	@Autowired
	private ShopService shopService;
	
	
	/**
	 * 返回商品列表页理的ShopCategory列表(二级或一级)，以及区域信息列表
	 * @param request
	 * @return
	 */
	@RequestMapping(value="/listshopspageinfo",method=RequestMethod.GET)
	@ResponseBody
	private Map<String,Object> listShopspageinfo(HttpServletRequest request){
		Map<String,Object> modelMap=new HashMap<String,Object>();
		
		//从前端获取parentId
		
		long parentId = HttpServletRequestUtil.getlong(request, "parentId");
		List<ShopCategory> shopCategoryList=null;
		//如果parentId存在，则取出一级parentId下面的二级shopCategory列表
		if(parentId!=-1){
			try{
			ShopCategory shopCategoryCondition=new ShopCategory();
			ShopCategory parent=new ShopCategory();
			parent.setShopCategoryId(parentId);
			shopCategoryCondition.setParent(parent);
			shopCategoryList=shopCategoryService.getShopCategoryList(shopCategoryCondition);
			}catch(Exception e){
				modelMap.put("success", false);
				modelMap.put("errMsg",e.getMessage());
			}
			//若parentId为空，则取出一级列表下的shopCategory列表（用户咋首页是全部商品列表）
		}else{
			try{
			shopCategoryList=shopCategoryService.getShopCategoryList(null);
			}catch(Exception e){
				modelMap.put("success", false);
				modelMap.put("errMsg",e.getMessage());
			}
		}
		modelMap.put("shopCategoryList",shopCategoryList);
		
		List<Area> areaList=null;
		try{
			//取出对应的区域列表信息
			areaList=areaService.getAreaList();
			modelMap.put("areaList", areaList);
			modelMap.put("success",true);
		}catch(Exception e){
			modelMap.put("success", false);
			modelMap.put("errMsg",e.getMessage());
	
		}
		return modelMap;
	}
	
	
	/**
	 * 获取指定查询条件下的店铺列表
	 * @param request
	 * @return
	 */
	@RequestMapping(value="/listshops",method=RequestMethod.GET)
	@ResponseBody
	private Map<String,Object> listShops(HttpServletRequest request){
		Map<String,Object> modelMap=new HashMap<String,Object>();
		//获取页码
		int pageIndex = HttpServletRequestUtil.getInt(request, "pageIndex");
		//获取一页需要显示的数据条数
		int pageSize = HttpServletRequestUtil.getInt(request, "pageSize");
		//非空判断
		if((pageIndex>-1)&(pageSize>-1)){
			//获取一级类别ID
			long parentId = HttpServletRequestUtil.getlong(request, "parentId");
			//获取二级类别ID
			long shopCategoryId = HttpServletRequestUtil.getlong(request, "shopCategoryId");
			//获取区域类别ID
			int areaId = HttpServletRequestUtil.getInt(request, "areaId");
			//获取模糊查询的名字
			String shopName = HttpServletRequestUtil.getString(request, "shopName");
			//获取组合之后的查询条件
			Shop shopCondition=compactShopCondition4Search(parentId,shopCategoryId,areaId,shopName);
			//根据查询条件和分页信息查询店铺列表，返回店铺总数
			ShopExecution se = shopService.getShopList(shopCondition, pageIndex, pageSize);
			modelMap.put("shopList",se.getShopList());
			modelMap.put("count", se.getCount());
			modelMap.put("success", true);
			
		}else{
			modelMap.put("success", false);
			modelMap.put("errMsg", "empty pageIndex or pageSize");
		}
		return modelMap;
		
		
	}
    /**
     * 组合查询条件，并将查询条件组合后封装到shopCondition里面去
     * @param parentId
     * @param shopCategoryId
     * @param areaId
     * @param shopName
     * @return
     */

	private Shop compactShopCondition4Search(long parentId, long shopCategoryId, int areaId, String shopName) {
  
		Shop shopCondition=new Shop();
		//非空判断
		if(parentId!=-1L){
			//查询某个一级shopCategory下面的二级店铺类别列表
			ShopCategory parentCategory=new ShopCategory();
			ShopCategory childCategory=new ShopCategory();
			parentCategory.setShopCategoryId(parentId);
			childCategory.setParent(parentCategory);
			shopCondition.setShopCategory(childCategory);
		}
		
		if(shopCategoryId!=-1L){
			//查询某个二级shopCategory下面的店铺列表
			ShopCategory shopCategory=new ShopCategory();
			shopCategory.setShopCategoryId(shopCategoryId);
			shopCondition.setShopCategory(shopCategory);
			
		}
		
		if(areaId!=-1L){
			//查询位于某个areaId下面的店铺列表
			Area area=new Area();
			area.setAreaId(areaId);
			shopCondition.setArea(area);
			
		}
		
		if(shopName!=null){
			//查询名字里包含shopName的店铺列表
			shopCondition.setShopName(shopName);
		}
		//前端展示的店铺都是审核成功了的店铺
		shopCondition.setEnableStatus(1);
		return shopCondition;
	}
	

}
